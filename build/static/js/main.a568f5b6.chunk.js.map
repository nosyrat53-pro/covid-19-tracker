{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","onClick","className","last","rec","CardContent","Typography","color","numeral","format","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","casesTypeColors","multiplier","recovered","deaths","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","pathOptions","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","MapContainer","TileLayer","url","attribution","Table","index","src","options","legent","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridlines","ticks","callback","values","LineGraph","useState","setData","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","useEffect","fetch","then","response","json","chartdata","fetchData","length","datasets","backgroundColor","borderColor","height","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","boxShadow","borderRadius","selectEmpty","marginTop","width","marginRight","hex","App","classes","setCountry","setCountries","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","setColor","res","cs","name","catch","err","console","log","getCountriesData","handleChange","event","countryCode","target","FormControl","Select","variant","labelId","id","onChange","MenuItem","paddingLeft","fontWeight","coun","iso2","e","todayCases","todayRecovered","todayDeaths","paddingTop","borderTop","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a568f5b6.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Card, CardContent, Typography, Button } from '@material-ui/core';\r\nimport numeral from 'numeral';\r\n\r\n\r\nfunction InfoBox({ title, cases, isRed , active , total , ...props }) {\r\n\r\n    return ( \r\n    \r\n    <Card \r\n    onClick={props.onClick} \r\n    className={`infoBox ${active ? 'infoBox--selected' : ''} ${isRed ? 'infoBox--red' : ''}`} \r\n    last={ title === 'Deaths' ? 'yes' : 'no' }\r\n    rec={ title === 'Recovered' ? 'yes' : 'no' } \r\n    >\r\n        <CardContent >\r\n\r\n        <Typography className=\"infoBox__title\"\r\n        color=\"textSecondary\" > { title } </Typography>\r\n\r\n        <h2 className={`infoBox__cases ${!isRed ? 'infoBox__cases--green' : ''}`} > { cases } </h2>\r\n\r\n        <Typography className=\"infoBox__total\"\r\n        color=\"textSecondary\" > { numeral(total).format(\"0,0\") } Total</Typography> \r\n        </CardContent >\r\n        </Card>\r\n\r\n    );\r\n}\r\n\r\nexport default InfoBox;","import React from 'react';\r\nimport numeral from 'numeral';\r\nimport { Circle, Popup } from 'react-leaflet';\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n\r\n    sortedData.sort((a, b) => {\r\n        if (a.cases > b.cases) {\r\n            return -1;\r\n        } else {\r\n            return 1;\r\n        }\r\n    });\r\n\r\n    return sortedData;\r\n}\r\n\r\nexport const prettyPrintStat = stat =>  stat ? `+${numeral(stat).format(\"0,0a\")}` : \"+0\" ;\r\n\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n        multiplier: 200,\r\n    },\r\n    recovered: {\r\n        multiplier: 400,\r\n    },\r\n    deaths: {\r\n        multiplier: 1200,\r\n    },\r\n}\r\n\r\n// Draw circles on the map with interactive tooltips\r\n\r\nexport const showDataOnMap = (data, casesType , color) =>\r\n    data.map(country => (\r\n        <Circle\r\n            center={[country.countryInfo.lat, country.countryInfo.long]}\r\n            fillOpacity={0.4}\r\n            pathOptions={{color: color,\r\n                fillColor: color}}\r\n            radius={\r\n                Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n            }\r\n        >\r\n            <Popup>\r\n                <div className=\"info-container\">\r\n                    <div className=\"info-flag\" \r\n                    style={{ backgroundImage: `url(${country.countryInfo.flag})` }} />\r\n\r\n                    <div className=\"info-name\">\r\n                        {country.country}\r\n                    </div>\r\n\r\n                    <div className=\"info-confirmed\">\r\n                        Cases: <strong>{numeral(country.cases).format(\"0,0\")}</strong>\r\n                    </div>\r\n\r\n                    <div className=\"info-recovered\">\r\n                        Recovered: <strong>{numeral(country.recovered).format(\"0,0\")}</strong>\r\n                    </div>\r\n                    \r\n                    <div className=\"info-deaths\">\r\n                        Deaths:<strong> {numeral(country.deaths).format(\"0,0\")}</strong>\r\n                    </div>\r\n                </div>\r\n            </Popup>\r\n        </Circle>\r\n    ))\r\n","import React from 'react';\r\nimport './Map.css';\r\nimport { MapContainer, TileLayer } from 'react-leaflet';\r\nimport { showDataOnMap } from './util';\r\n\r\n\r\nfunction Map({ countries, casesType , color ,   center, zoom }) {\r\n\r\n    return (\r\n        <div className=\"map\">\r\n            <MapContainer center={center} zoom={zoom}>\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                />\r\n                {/* loop throught countries and draw circles on the map */}\r\n                {showDataOnMap(countries , casesType , color)}\r\n            </MapContainer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Map;","import React from 'react';\r\nimport numeral from 'numeral';\r\nimport './Table.css';\r\n\r\nfunction Table({countries}){\r\n    return(\r\n        <div className=\"table\">\r\n            {countries.map(({country, cases , countryInfo} , index) => (\r\n                <tr key={index}>\r\n                    <td><img src={countryInfo.flag} className=\"table__flag\"/></td>\r\n                    <td>{country}</td>\r\n                    <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\r\n                </tr>\r\n                \r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Table ;","import React, { useEffect, useState } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport numeral from 'numeral';\r\n\r\nconst options = {\r\n    legent: {\r\n        display: false\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: 'index',\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: 'time',\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: 'll'\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridlines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    callback: function(value , index,values){\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    }\r\n}\r\n\r\nfunction LineGraph({casesType = 'cases' , color}) {\r\n\r\n    const [data, setData] = useState({});\r\n\r\n    const buildChartData = (data) => {\r\n        const chartData = [];\r\n        let lastDataPoint;\r\n        for (let date in data[casesType]) {\r\n            if (lastDataPoint) {\r\n                const newDataPoint = {\r\n                    x: date,\r\n                    y: data[casesType][date] - lastDataPoint\r\n                }\r\n                chartData.push(newDataPoint);\r\n            }\r\n            lastDataPoint = data[casesType][date];\r\n        }\r\n\r\n        return chartData;\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchData = async () => {\r\n            await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                const chartdata = buildChartData(data , casesType);\r\n                setData(chartdata);\r\n            });\r\n        }\r\n\r\n        fetchData();\r\n        \r\n    }, [casesType]);\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"graph\">\r\n            {data?.length > 0 && (\r\n                <Line\r\n                    data={{\r\n                        datasets: [{\r\n                            data: data ,\r\n                            backgroundColor: color,\r\n                            borderColor: color,\r\n                            label: `Covid-19 ${casesType}`\r\n                        }]\r\n                    }}\r\n                    options={options}\r\n                    height={250}\r\n                />\r\n\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LineGraph;","import { FormControl, Select, MenuItem, Card, CardContent } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport \"./InfoBox.css\" ;\n\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport { sortData , prettyPrintStat } from './util';\nimport LineGraph from './LineGraph';\nimport 'leaflet/dist/leaflet.css';\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n    backgroundColor: '#fff',\n    boxShadow:'0px 2px 1px -1px rgb(0 0 0 / 20%), 0px 1px 1px 0px rgb(0 0 0 / 14%), 0px 1px 3px 0px rgb(0 0 0 / 12%)',\n    borderRadius: '4px',\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n  flag: {\n    width: 28,\n    height: 22,\n    marginRight: 10,\n  },\n}));\n\n\nconst casesTypeColors = {\n  cases: {\n      hex: \"#cc1034\",\n  },\n  recovered: {\n      hex: \"#7dd71d\",\n  },\n  deaths: {\n      hex: \"#fb4443\",\n  },\n}\n\n\nfunction App() {\n\n  const classes = useStyles();\n  const [country, setCountry] = useState('worldwide');\n  const [countries, setCountries] = useState([]);\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter , setMapCenter] = useState({lat: 34.80746 , lng: -40.4796});\n  const [mapZoom , setMapZoom] = useState(3);\n  const [mapCountries , setMapCountries] = useState([]);\n  const [casesType , setCasesType] = useState('cases') ;\n  const [color, setColor] = useState('#cc1034');\n\n  useEffect(()=>{\n    setColor(casesTypeColors[casesType].hex) ;\n  },[casesType]);\n\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/all')\n      .then(res => res.json())\n      .then(data =>\n        setCountryInfo(data)\n      )\n  }, []);\n\n  useEffect(() => {\n\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then(response => response.json())\n        .then(data => {\n          const cs = data.map((country) => (\n            {\n              name: country.country,\n              value: country.countryInfo\n            }\n          ));\n          \n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(cs);\n\n        })\n        .catch(err => console.log(err))\n    }\n\n    getCountriesData()\n\n  }, []);\n\n\n  function findLanLng(iso2){\n    for(let i = 0 ; i < countries.length ; i++){\n      if(countries[i].value.iso2 === iso2){\n        return {\n          lat: countries[i].value.lat,\n          lng: countries[i].value.long\n        }\n      }\n    }\n  }\n\n  const handleChange = async (event) => {\n    const countryCode = event.target.value;\n\n    // Move to new point on the map to show the country wich we get the countryCode of it from the dropdown\n    // setMapCenter(findLanLng(countryCode)) ;\n\n    const url = countryCode === 'worldwide' ? 'https://disease.sh/v3/covid-19/all' : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        setCountry(countryCode)\n        setCountryInfo(data)\n        setMapCenter([data.countryInfo.lat , data.countryInfo.long]);\n        setMapZoom(4)\n      }\n      )\n      .catch(err => console.log(err));\n  }\n\n  return (\n    <div className=\"app\">\n\n      <div className=\"app__left\">\n\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className={classes.formControl}>\n            <Select\n              variant=\"outlined\"\n              labelId=\"demo-simple-select-label\"\n              id=\"demo-simple-select\"\n              value={country}\n              onChange={handleChange}\n            >\n              <MenuItem value=\"worldwide\" style={{ paddingLeft: 55, fontWeight: 600 }}>WorldWide</MenuItem>\n              {countries.map((coun, index) => {\n\n                return (\n                  <MenuItem value={coun.value.iso2} key={index}>\n                    <img src={coun.value.flag} className={classes.flag} />\n                    { coun.name}\n                  </MenuItem>\n                )\n              })}\n            </Select>\n          </FormControl>\n\n        </div>\n\n\n        <div className=\"app__stats\">\n\n          <InfoBox \n          isRed\n          active={casesType === 'cases'}\n          onClick={(e) => setCasesType('cases')}\n          title=\"Coronavirus Cases\" \n          cases={prettyPrintStat(countryInfo.todayCases)} \n          total={countryInfo.cases} \n          />\n          \n          <InfoBox \n          active={casesType === 'recovered'}\n          onClick={(e) => setCasesType('recovered')}\n          title=\"Recovered\" \n          cases={prettyPrintStat(countryInfo.todayRecovered)} \n          total={countryInfo.recovered} \n          />\n          \n          <InfoBox \n          isRed\n          active={casesType === 'deaths'}\n          onClick={(e) => setCasesType('deaths')}\n          className=\"lastBox\" \n          title=\"Deaths\" \n          cases={prettyPrintStat(countryInfo.todayDeaths)} \n          total={countryInfo.deaths} \n          />\n\n        </div>\n\n        <Map \n        countries={mapCountries}\n        center={mapCenter}\n        zoom={mapZoom}\n        casesType={casesType}\n        color={color}\n        />\n\n      </div>\n\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live cases by country</h3>\n\n          <Table countries={tableData} />\n\n          <h3 style={{paddingTop: '10px', borderTop: '1px solid black'}}>WorldWide {casesType}</h3>\n          \n          <LineGraph casesType={casesType} color={color}/>\n\n        </CardContent>\n\n      </Card>\n\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}